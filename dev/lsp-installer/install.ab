import { dir_exist, make_executable } from "std/fs"
import { download } from "std/http"
import { is_root, exit } from "std/env"

if not is_root() {
    echo "This script requires root permissions!"
    exit(1)
}

fun get_download_path(repo, position) {
    return unsafe $curl -sL "https://api.github.com/repos/{repo}/releases" | jq -r ".[0].assets.[{position}].browser_download_url"$
}

fun move_to_bin(download_url, binary) {
    if download(download_url, binary) {
        unsafe $mv "{binary}" /usr/local/bin$
        make_executable("/usr/local/bin/{binary}")
    } else {
        echo "Download for {binary} at {download_url} failed"
    }
}

silent unsafe $cd /tmp$

echo "Install PHPactor LSP"
move_to_bin(get_download_path("phpactor/phpactor", 0), "phpactor")

echo "Install Typos LSP"
let download_url = get_download_path("tekumara/typos-lsp", 6)
if download(download_url, "typos.tar.gz") {
    silent unsafe {
        $tar -zxvf ./typos.tar.gz -C ./typos-lsp$
        $rm ./typos.tar.gz$
    }
    unsafe $mv typos-lsp /usr/local/bin$
    make_executable("/usr/local/bin/typos-lsp")
}

echo "Install GitLab CI LSP"
move_to_bin(get_download_path("alesbrelih/gitlab-ci-ls", 3), "gitlab-ci-ls")

echo "Install HTMX LSP"
move_to_bin(get_download_path("ThePrimeagen/htmx-lsp", 2), "htmx-lsp")

echo "Install Marksman LSP"
move_to_bin(get_download_path("artempyanykh/marksman", 1), "marksman")

echo "Install Lua LSP"
if not dir_exist("/opt/lua-language-server") {
    unsafe $cd /opt/$
    unsafe $git clone https://github.com/LuaLS/lua-language-server$
} else {
    unsafe $cd /opt/lua-language-server$
}
silent unsafe {
    $cd lua-language-server$
    $git pull$
    $./make.sh$
    $ln -s /opt/lua-language-server/bin/lua-language-server /usr/local/bin/lua-language-server$
}

silent unsafe $cd /tmp$

let npm_lsp = ["vscode-langservers-extracted", "@tailwindcss/language-server", "@olrtg/emmet-language-server", "intelephense", "bash-language-server"]
let npm_lsp_name = ["CSS, HTML, JSON LSP", "Tailwind LSP", "Emmet LSP", "Intelephense LSP", "Bash LSP"]
loop index, lsp in npm_lsp {
    echo "Install {npm_lsp_name[index]}"
    $npm i -g "{lsp}"$ failed {
        echo "Error! Exit code: {status}"
    }
}

let command_lsp = ["pip install python-lsp-server", "gem install ruby-lsp"]
let command_lsp_name = ["Python LSP", "Ruby LSP"]

loop index, lsp in command_lsp {
    echo "Install {command_lsp_name[index]}"
    ${lsp}$ failed {
        echo "Error! Exit code: {status}"
    }
}
